# -*- coding: utf-8 -*-
"""Stock market code.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1R3h0VFeZY7m_D8uAT7W1rtRuzB5dBYZL
"""

from sklearn.model_selection import TimeSeriesSplit
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_percentage_error
from sklearn.preprocessing import MinMaxScaler, StandardScaler
import numpy as np
from sklearn.metrics import mean_squared_error
import datetime as dt
import matplotlib.pyplot as plt
import matplotlib.dates as mdates
import pandas as pd
stock_data = pd.read_csv('NFLX (1).csv', index_col='Date')
stock_data.head()

plt.figure(figsize=(15, 10))
plt.gca().xaxis.set_major_formatter(mdates. DateFormatter('%Y-%m-%d'))
plt.gca().xaxis.set_major_locator(mdates.DayLocator(interval=60))
x_dates = [dt.datetime.strptime(d, '%Y-%m-%d').date()
           for d in stock_data.index.values]

plt.plot(x_dates, stock_data['High'], label='High')
plt.plot(x_dates, stock_data['Low'], label='Low')
plt.xlabel('Time Scale')
plt.ylabel('Scaled USD')
plt. legend()
plt.gcf().autofmt_xdate()
plt.show()


target_y = stock_data['Close']
X_feat = stock_data.iloc[:, 0:3]


sc = StandardScaler()
X_ft = sc.fit_transform(X_feat. values)
X_ft = pd.DataFrame(columns=X_feat. columns, data=X_ft, index=X_feat.index)


def lstm_split(data, n_steps):
    X, y = [], []
    for i in range(len(data)-n_steps+1):
        X.append(data[i:i+n_steps, :-1])
        y.append(data[i+n_steps-1, -1])
    return np.array(X), np.array(y)


X1, y1 = lstm_split(X_ft.values, n_steps=2)
print(y1.shape)
train_split = 0.8
split_idx = int(np.ceil(len(X1)*train_split))
date_index = X_ft.index

X_train, X_test = X1[:split_idx], X1[split_idx:]
y_train, y_test = y1[:split_idx], y1[split_idx:]
x_train_date, X_test_date = date_index[:split_idx], date_index[split_idx:]
print(X1.shape, X_train.shape, X_test.shape, y_test.shape)

y_pred = lstm.predict(X_test)

rmse = mean_squared_error(y_test, y_pred, squared=False)
mape = mean_absolute_percentage_error(y_test, y_pred)
print("RSME: ", rmse)
print("MAPE: ", mape)

plt.figure(figsize=(15, 10))
plt.gca().xaxis.set_major_formatter(mdates. DateFormatter('%Y-%m-%d'))
plt.gca().xaxis.set_major_locator(mdates.DayLocator(interval=60))
x_dates = [dt.datetime.strptime(d, '%Y-%m-%d').date()
           for d in stock_data.index.values]

plt.plot(y_test, label='y_test')
plt.plot(y_pred, label='y_pred')
plt.xlabel('Time Scale')
plt.ylabel('Scaled USD')
plt. legend()
plt.gcf().autofmt_xdate()
plt.show()
